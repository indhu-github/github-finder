{"version":3,"sources":["components/DetailsTable.js","components/Profile.js","App.js","serviceWorker.js","index.js"],"names":["DetailsTable","data","repo","className","name","avatar_url","src","alt","location","bio","map","key","href","html_url","Profile","useState","setData","username","setUsername","repositories","setRepositories","OnSubmit","e","a","preventDefault","fetch","githubProfile","json","JsonProfile","repos_url","repos","repoJson","type","placeholder","value","onChange","target","onClick","App","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sPAEe,SAASA,EAAT,GAAmC,IAAZC,EAAW,EAAXA,KAAKC,EAAM,EAANA,KACvC,OACI,6BACI,2BAAOC,UAAU,SACb,+BACI,4BACI,oCACA,sCACA,wCACA,mCACA,8CAGR,+BACI,4BACI,4BAAKF,EAAKG,MACV,4BAAMH,EAAKI,WACX,yBAAKF,UAAU,aAAaG,IAAKL,EAAKI,WAAYE,IAAKN,EAAKI,aADtC,KAEtB,4BAAKJ,EAAKO,UACV,4BAAKP,EAAKQ,KACV,4BAAKP,EAAKQ,KAAI,SAAAR,GAAI,OACd,yBAAKS,IAAKT,EAAKE,MACX,uBAAGQ,KAAMV,EAAKW,UAAWX,EAAKE,eCtB9D,IAkDeU,EAlDC,WAAO,IAAD,EACIC,mBAAS,IADb,mBACbd,EADa,KACPe,EADO,OAEYD,mBAAS,IAFrB,mBAEbE,EAFa,KAEHC,EAFG,OAGoBH,mBAAS,IAH7B,mBAGbI,EAHa,KAGCC,EAHD,KASdC,EAAQ,uCAAG,WAAOC,GAAP,qBAAAC,EAAA,6DACfD,EAAEE,iBADa,SAEaC,MAAM,gCAAD,OACCR,IAHnB,cAETS,EAFS,gBAKWA,EAAcC,OALzB,cAKTC,EALS,gBAQKH,MAAMG,EAAYC,WARvB,cAQTC,EARS,iBASQA,EAAMH,OATd,QASTI,EATS,OAYXH,IACFZ,EAAQY,GACRR,EAAgBW,IAdH,4CAAH,sDAkBd,OACE,yBAAK5B,UAAU,aACb,0BAAMA,UAAU,eACd,yBAAKA,UAAU,cACb,2BACE6B,KAAK,OACL7B,UAAU,eACV8B,YAAY,SACZC,MAAOjB,EACPkB,SA/Bc,SAACb,GACvBJ,EAAYI,EAAEc,OAAOF,WAkCjB,4BAAQF,KAAK,SAAS7B,UAAU,kBAAkBkC,QAAShB,GAA3D,WAKF,kBAACrB,EAAD,CAAcC,KAAMA,EAAMC,KAAMiB,MCjCvBmB,MAVf,WACE,OACE,yBAAKnC,UAAU,aACb,6CACA,kBAAC,EAAD,QCIcoC,QACW,cAA7BC,OAAOhC,SAASiC,UAEe,UAA7BD,OAAOhC,SAASiC,UAEhBD,OAAOhC,SAASiC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.a16c3ede.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport default function DetailsTable({data,repo}){\r\n    return (\r\n        <div>\r\n            <table className=\"table\">\r\n                <thead>\r\n                    <tr>\r\n                        <th>Name</th>\r\n                        <th>Avatar</th>\r\n                        <th>Location</th>\r\n                        <th>Bio</th>\r\n                        <th>Repositories</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    <tr>\r\n                        <td>{data.name}</td>\r\n                        <td>{!data.avatar_url?\" \":\r\n                        <img className='img-circle' src={data.avatar_url} alt={data.avatar_url}/>}</td>\r\n                        <td>{data.location}</td>\r\n                        <td>{data.bio}</td>\r\n                        <td>{repo.map(repo=>\r\n                            <div key={repo.name}>\r\n                                <a href={repo.html_url}>{repo.name}</a>\r\n                            </div>\r\n                            )}\r\n                        </td>\r\n                    </tr>\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React, { useState } from \"react\";\r\nimport DetailsTable from \"./DetailsTable\";\r\nconst Profile = () => {\r\n  const [data, setData] = useState({});\r\n  const [username, setUsername] = useState(\"\");\r\n  const [repositories, setRepositories] = useState([]);\r\n\r\n  const OnUsernameGiven = (e) => {\r\n    setUsername(e.target.value);\r\n  };\r\n\r\n  const OnSubmit = async (e) => {\r\n    e.preventDefault();\r\n    const githubProfile = await fetch(\r\n      `https://api.github.com/users/${username}`\r\n    );\r\n    const JsonProfile = await githubProfile.json();\r\n    //console.log(JsonProfile);\r\n\r\n    const repos = await fetch(JsonProfile.repos_url);\r\n    const repoJson = await repos.json();\r\n    //console.log(repoJson);\r\n\r\n    if (JsonProfile) {\r\n      setData(JsonProfile);\r\n      setRepositories(repoJson);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <form className=\"form-inline\">\r\n        <div className=\"form-group\">\r\n          <input\r\n            type=\"text\"\r\n            className=\"form-control\"\r\n            placeholder=\"Search\"\r\n            value={username}\r\n            onChange={OnUsernameGiven}\r\n          />\r\n        </div>\r\n\r\n        <button type=\"submit\" className=\"btn btn-success\" onClick={OnSubmit}>\r\n          Search\r\n        </button>\r\n      </form>\r\n\r\n      <DetailsTable data={data} repo={repositories} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Profile;\r\n","import React from 'react';\nimport './App.css';\nimport Profile from './components/Profile';\n\nfunction App() {\n  return (\n    <div className=\"container\">\n      <h2>Github Finder</h2>\n      <Profile/>\n      \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}